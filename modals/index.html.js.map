{"version":3,"file":"modals\\index.html.js","mappings":"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","sources":["webpack://de-migration/./node_modules/modal-popups-js/modals.js","webpack://de-migration/./src/demos/modals/index.js"],"sourcesContent":["export let Modals = (function() {\n\n    let store = {};\n\n    let Constructor = function( options ) {\n\n        var publicMethods = {};\n        var settings; \n\n        // Private\n        var show = function( target ) {\n            if( settings.targetGroup != null ) hideSiblings( settings.targetGroup );  \n            target.setAttribute( 'data-modal-container', 'visible' ); \n            publicMethods.updateState( { 'visible' : true } );\n\n            document.querySelector( 'body' ).setAttribute( 'data-modal', 'active' );\n            document.querySelector( 'body' ).setAttribute( 'data-overlay', 'active' );\n        }\n\n        var hide = function( target ) {\n            target.setAttribute( 'data-modal-container', 'hidden' );\n            publicMethods.updateState( { 'visible' : false } );\n        }\n\n        // Public\n\n        publicMethods.toggle = function toggle( e ) {\n\n            if( e !== undefined ) {\n                // Check for field to update based on result of modal Transaction\n                settings.fieldToUpdate = ( e.target.getAttribute( 'data-target-update-field' ) == undefined ) ? null : e.target.getAttribute( 'data-target-update-field' ); \n            }\n\n            if( settings.container.getAttribute( 'data-modal-container' ) == 'hidden' ) {\n                show( settings.target );\n            } else {\n                hide( settings.target );\n            }        \n\n        }\n\n        publicMethods.getFieldToUpdate = function getFieldToUpdate() {\n            return ( settings.fieldToUpdate == undefined ) ? null : settings.fieldToUpdate;  \n        }\n        \n        publicMethods.init = ( options ) => {\n        \n            settings = options; // This makes arguments available in the scope of other methods within this object \n\n            if( settings.override === 'true' ) {\n\n                try {    \n                    settings.callback = ( event ) => { \n                        window[ settings.customCallback ]( event );\n                    }; \n                } catch( error ) {\n                    console.error( 'Modal Plugin, custom callback for Modal ID: ' + settings.id + '  failed. Message: ' + error.message );\n                }\n\n            } else {\n                settings.callback = ( event ) => Modals.getModal( settings.id ).toggle( event );\n            }\n\n            for( let i = 0; i < settings.triggers.length; i++ ) {\n                \n                settings.triggers[ i ].setAttribute( 'data-trigger-id', i );\n                let triggerEvent = settings.triggers[ i ].getAttribute( 'data-modal-trigger' ); \n                triggerEvent = ( triggerEvent !== undefined && triggerEvent !== '' ) ? triggerEvent : 'click'; \n                settings.triggers[ i ].addEventListener( triggerEvent, settings.callback );\n\n            }\n\n            function transitionEnd( event ) { \n\n                let multipleOpenModals = document.querySelectorAll( '[data-modal-container=\"visible\"]' );\n\n                if( multipleOpenModals.length < 1 ) { \n                        document.querySelector( 'body' ).setAttribute( 'data-modal', 'inactive' );\n                        document.querySelector( 'body' ).setAttribute( 'data-overlay', 'inactive' );\n                }\n\n            }\n\n            settings.target.addEventListener( 'transitionend', transitionEnd ); \n\n            if( !settings.visible ) {\n                hide( settings.target );\n            }\n\n        };\n\n        publicMethods.updateState = function( state ) {\n            \n            for( let setting in state ) {\n                settings[ setting ] = state[ setting ];\n            }\n\n        }\n        \n        publicMethods.getSettings = function() {\n            return settings;\n        }\n\n        publicMethods.isVisible = function() {\n            return settings.visible;\n        }\n\n        // Initialize plugin\n        publicMethods.init( options );\n        \n        return publicMethods;\n        \n    }\n\n    const setModal = function( name, obj ) {\n        store[ name ] = obj;\n    }\n\n    const getModal = function( name ) {\n        return store[ name ];\n    }\n\t\n    const getModals = function() {\n        return store;\n    }\n\n    const addCloseModalEvents = function() {\n\n        const modalParentContainer = document.querySelector( '.modal-containers' );\n\n        // Collapse all containers if Fly-Container tag is clicked\n        // Allow users to exit modal without having to click 'close' button\n        window.addEventListener( 'click', function( event ) {\n\n            const closeTrigger = event.target.getAttribute( 'data-close-modal' ); \n            \n            //If you click in the gray overlay space (the main modal parent container), hide every modal.\n            if( event.target == modalParentContainer ) { \n                let modals = document.querySelectorAll( '[data-modal-container]' );\n\n                for( let i = 0; i < modals.length; i++ ) {\n                    const modal = Modals.getModal( modals[i].getAttribute('data-modal-target') );\n                    if( modal.isVisible() ) {\n                        modal.toggle();\n                    }\n                }     \n            }\n\n            //If you click the X button, close that single modal.\n            if( closeTrigger !== null ) { \n                Modals.getModal( closeTrigger ).toggle();\n            }\n\n        });\n\n    }\n\n    let registerModal = function( modal ) {\n\n        let modalTarget          = modal;\n        let modalName            = modalTarget.getAttribute( 'data-modal-target' );\n        let modalTriggerSelector = '[data-modal-target=' + modalName + '][data-modal-trigger]';\n        let modalTriggers        = document.querySelectorAll( modalTriggerSelector ); \n        let isVisible            = ( modal.getAttribute( 'data-modal-container' ) == 'hidden' ) ? false : true;\n        let modalCallback        = null;\n        let callbackName;\n\n        //modalCallback will be called if you set modalOverride to 'true' (string val).\n        //The first (and only) argument to modalCallback will be e (the click event).\n        //If you do this, you will need to open the modal on your own. You will also need to obtain the field to update.\n        //See toggle() above for how to do this. Or, you could just call toggle() on your own and pass e along to it.\n        let modalOverride = modal.getAttribute( 'data-modal-override' );\n\n        if( modalOverride !== undefined && modalOverride !== 'false' ) {\n            callbackName = modal.getAttribute( 'data-modal-callback' ); \n            modalCallback = ( callbackName == undefined ) ? null : callbackName; // string, name of function to call\n            if( modalCallback == null ) { console.warn( 'Modals Plugin did not detect custom callback for override, Node:', modal ); }\n        }\n\n        if( modalTarget == null ) { console.warn( 'Modal Plugin, did not detect target, Node:', modal ); }\n        if( modalTriggers.length == 0 ) { console.warn( 'Modal Plugin, did not detect trigger, Node:', modal ) ; }\n\n        //As you instantiate new modalPlugins, insert them in the modalStore object, indexed by the name of the modal.\n        this.storeModal( \n            modalName,\n            new Modals.launch({\n                id               : modalName,\n                container        : modalTarget, \n                triggerSelector  : modalTriggerSelector, \n                triggers         : modalTriggers,  \n                target           : modalTarget, \n                override         : modalOverride,\n                customCallback   : modalCallback,\n                visible          : isVisible,\n            })\n        );\n\n        function findAncestor(el, sel) {\n            while ((el = el.parentElement) && !((el.matches || el.matchesSelector).call(el,sel)));\n            return el;\n        }\n\n    }\n    \n    const closeModal = function( modalName ) {\n\t    this.getModal( modalName ).toggle();\n    }\n\n    return { \n        launch              : Constructor, \n        registerModal       : registerModal, \n        storeModal          : setModal, \n        getModal            : getModal, \n\t\tgetModals           : getModals,\n        addCloseModalEvents : addCloseModalEvents, \n        closeModal          : closeModal\n    };  \n  \n})();\n\nexport let initModals = function( modalContainer = '.modal-containers' ){\n\n    const modalParentContainer = document.querySelector( modalContainer );\n    let modals = modalParentContainer.querySelectorAll( '[data-modal-container]' );\n    if( modals.length === 0 ) { console.warn( 'Modal plugin not initialized; div.modal-container not defined' ); return; }; \n\n    for( let i = 0; i < modals.length; i++ ) {\n        Modals.registerModal( modals[ i ], i );\n    }\n\n    Modals.addCloseModalEvents();\n\n}","\r\n    // ES6 Module Import\r\n    import { Modals, initModals } from 'modal-popups-js/modals.js'; \r\n\r\n    // Initialize Plugin\r\n    initModals();\r\n    \r\n"],"names":["Modals","store","launch","options","settings","publicMethods","hide","target","setAttribute","updateState","toggle","e","undefined","fieldToUpdate","getAttribute","container","targetGroup","hideSiblings","document","querySelector","getFieldToUpdate","init","override","callback","event","window","customCallback","error","console","id","message","getModal","i","triggers","length","triggerEvent","addEventListener","querySelectorAll","visible","state","setting","getSettings","isVisible","registerModal","modal","callbackName","modalTarget","modalName","modalTriggerSelector","modalTriggers","modalCallback","modalOverride","warn","this","storeModal","triggerSelector","name","obj","getModals","addCloseModalEvents","modalParentContainer","closeTrigger","modals","closeModal","modalContainer","initModals"],"sourceRoot":""}